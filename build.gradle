//install the commit hook if possible.
def hook = new File('pre-commit.sh')
def hook_folder = new File('./.git/hooks')
def installed_hook = new File('./.git/hooks/pre-commit')

if (hook.exists() && hook_folder.exists() && !installed_hook.exists()) {
  println("Installing pre-commit hook")
  exec {
      workingDir '.'
      commandLine 'cp', hook, installed_hook
  }  
}


if(JavaVersion.current() < JavaVersion.VERSION_1_7){
    println("\t************************")
    println("\t*** Hello from Bixie ***")
    println("\tYou will need Java 1.7 or higher if you want to continue.")
    println("\tYour Java is really old. Found version " + JavaVersion.current())
    println("\t************************")
    throw new GradleException("Update your Java!")    
}


apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'application'
apply plugin: 'findbugs'
apply plugin: 'jdepend'
if (!project.hasProperty('coverityMode')) {
  //don't use error-prone when checking the code
  //with coverity or infer, because it wraps around
  //the compiler which confuses these tools.
  apply plugin: 'net.ltgt.errorprone'
}
apply plugin: 'checkstyle'

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

sourceCompatibility = 1.7
def version = '1.0'
jar.archiveName = "bixie_dyn.jar"
shadowJar.archiveName = "bixie.jar"
mainClassName = "bixie.Main"

repositories {
  mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://maven.eveoh.nl/content/repositories/releases"            
        }
        maven {
            name 'Shadow'
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
        classpath "nl.eveoh:gradle-aspectj:1.5"
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:latest.release'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
    }
}
project.ext {
    aspectjVersion = '1.8.4'
}

if (project.hasProperty('debugMode')) {
  apply plugin: 'aspectj'
}

configurations{
  common
}

dependencies {
    compile 'args4j:args4j:2.32'    
    compile 'log4j:log4j:1.2.17'
    compile 'com.google.code.findbugs:annotations:3.0.0'
    compile 'org.scala-lang:scala-actors:2.11.7'
    compile 'org.scala-lang:scala-library:2.11.7'

    compile fileTree(dir: 'lib', include: '*.jar')    
    testCompile "junit:junit:4.11"  // Or whatever version
}


// building the jar ---------------------
jar {
  println("WARNING: jar does not create an executable jar. Use shadowJar instead.")
  baseName = 'bixie'

    manifest {
        attributes 'Main-Class': mainClassName,
                   'Class-Path': '.',
                   'Implementation-Title': 'Bixie',
                   'Implementation-Version': version
    }

    from('src/main/resorces'){ include('log4j.properties')}

    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

jar.dependsOn shadowJar

// testing related activities -----------------
tasks.withType(FindBugs) {
    effort = "default"
    reportLevel = "medium"

    reports {
        xml.enabled = false
        html.enabled = true
    }
 }



jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
}

test {
  jacoco {
    enabled = true
  }

    testLogging {
        events "failed"
        exceptionFormat "full"
    }

    useJUnit()
}

task selfCheck {
  group 'Verification'
  description 'Run Bixie on itself.'

  doLast {
    def bixieJar = jar.archivePath
    def bixieDir = compileJava.destinationDir
    def bixieClassPath = compileJava.classpath.asPath
    //TODO generate this.
    def bixieReportDir = "${buildDir}/reports/self_test.txt"

    exec {
        workingDir '.'
        commandLine 'java', '-jar', bixieJar, '-j', bixieDir, '-cp', bixieClassPath, '-o', bixieReportDir
    }

  }
}

task inferCheck {
  group 'Verification'
  description 'Run Facebook Infer on this project.'

  doLast {
    println("REQUIRES Infer TO BE IN YOUR PATH.")

    exec {
        workingDir '.'
        commandLine 'infer', '--', 'gradle', '-PcoverityMode', 'clean', 'compileJava'
    }

  }
}

task coverityCheck {
  group 'Verification'
  description 'Send the build to coverity for analysis'

  doLast {
    println("REQUIRES cov-build TO BE IN YOUR PATH.")
    println("Running coverity")
    exec {
      workingDir '.'
      commandLine 'cov-build', '--dir', 'cov-int', 'gradle', '-PcoverityMode', 'clean', 'compileJava'
    }
    println("Packing the results")
    exec {
      workingDir '.'
      commandLine 'tar', 'czvf', 'cov-report.tgz', 'cov-int'
    }
    println("Uploading to coverity")
    exec {
      workingDir '.'
      commandLine 'curl', '--form', 'token=HjXY85BAQIZStbt3Lphk5g', '--form' , 'email=martinschaef@gmail.com', '--form', 'file=@cov-report.tgz', '--form', 'version="${version}"', 'https://scan.coverity.com/builds?project=martinschaef%2Fbixie'
    }
    exec {
      workingDir '.'
      commandLine 'rm', 'cov-report.tgz'
    }    
    println("Done")
  }
}

// eclipse related activities ---------------------
//add aspectj support for eclipse plugin
eclipse.classpath.file.withXml { xmlProvider ->
  def classpath = xmlProvider.asNode()
  def xmlparser = new XmlParser()

  configurations.common.files.each{ aspectsLib ->
    classpath.children().findAll{ it['@path'] == aspectsLib.absolutePath }.each {
      def attrs = xmlparser.createNode(it, 'attributes', [:])
      xmlparser.createNode(attrs, 'attribute', [name: 'org.eclipse.ajdt.aspectpath', value: 'true']);
    }
  }
}

eclipse.project.file.withXml { xmlProvider->
  def projectDescription = xmlProvider.asNode()
  def xmlparser = new XmlParser()

  def builders = projectDescription.buildSpec[0]
  def ajbuilder = xmlparser.createNode(builders, 'buildCommand', [:])
  xmlparser.createNode(ajbuilder, 'name', [:]).setValue('org.eclipse.ajdt.core.ajbuilder')
  xmlparser.createNode(ajbuilder, 'arguments', [:]);

  def natures = projectDescription.natures[0]
  def ajnature = xmlparser.createNode(null, 'nature', [:])
  ajnature.setValue('org.eclipse.ajdt.ui.ajnature');
  natures.children().add(0, ajnature)
}



task runExperiments {
  group 'Verification'
  description 'Run all experiments for Bixie.'

  doLast {
    println("Rebuild Jar with Aspects.")
    exec {
      workingDir '.'
      commandLine './gradlew', '-PdebugMode', 'clean', 'jar'
    }  
    println("Running the experiments.")
    println("\tcopy the bixie jar into the experiments folder")  
    copy {
      from jar.archivePath 
      into 'experiments'
      rename { fileName ->
        "bixie.jar"
      }
    }
    println("\tRun the experiments.")  
    println("\tATTENTION: this may take hours!")
    exec {
      workingDir 'experiments'
      executable 'python'
      args 'bixie.py'
    }
    println("Done.")
  }
}

