apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'application'
apply plugin: 'findbugs'

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

sourceCompatibility = 1.7
version = '1.0'
jar.archiveName = "bixie.jar"
mainClassName = "bixie.Bixie"


configurations{
    common
	ajc
	aspects
	ajInpath
}

dependencies {
    compile fileTree(dir: 'lib', include: '*.jar')
    compile 'org.aspectj:aspectjrt:1.8.5'
    
    testCompile "junit:junit:4.11"  // Or whatever version
    
    ajc 'org.aspectj:aspectjtools:1.8.5'
}

// compile with aspects ----------------
// taken from https://github.com/ultraq/gradle-support/blob/master/aspectj.gradle

sourceSets {
	main {
		java {
			exclude '**/*.aj'
		}
	}
}

compileJava.deleteAllActions()
compileJava << {
	ant.taskdef(
		resource: 'org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties',
		classpath: configurations.ajc.asPath)
	ant.iajc(
		source: sourceCompatibility,
		target: targetCompatibility,
		destDir: sourceSets.main.output.classesDir.absolutePath,
		fork: 'true',
		X: 'noInline',
		aspectPath: configurations.aspects.asPath,
		inpath: configurations.ajInpath.asPath,
		sourceRootCopyFilter: '**/*.java,**/*.aj',
		classpath: configurations.compile.asPath) {

		sourceroots {
			sourceSets.main.java.srcDirs.each { dir ->
				pathelement(location: dir.absolutePath)
			}
		}
	}
}


// building the jar ---------------------
jar {
	baseName = 'bixie'

    manifest {
        attributes 'Main-Class': 'bixie.Bixie',
                   'Class-Path': '.',
                   'Implementation-Title': 'Bixie',
                   'Implementation-Version': version
    }

    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}


// testing related activities -----------------
tasks.withType(FindBugs) {
    effort = "default"
    reportLevel = "high"

    reports {
        xml.enabled = false
        html.enabled = true
    }
 }

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
}

test {
	jacoco {
		enabled = true
	}

    testLogging {
        events "failed"
        exceptionFormat "full"
    }

   	useJUnit()
}

task selfCheck {
  group 'Verification'
  description 'Run Bixie on itself.'

  doLast {
    def bixieJar = jar.archivePath
    def bixieDir = compileJava.destinationDir
    def bixieClassPath = compileJava.classpath.asPath
    //TODO generate this.
    def bixieReportDir = "${buildDir}/reports/self_test.txt"

    exec {
        workingDir '.'
        commandLine 'java', '-jar', bixieJar, '-j', bixieDir, '-cp', bixieClassPath, '-o', bixieReportDir
    }

  }
}

// eclipse related activities ---------------------
//add aspectj support for eclipse plugin
eclipse.classpath.file.withXml { xmlProvider ->
	def classpath = xmlProvider.asNode()
	def xmlparser = new XmlParser()

	configurations.common.files.each{ aspectsLib ->
		classpath.children().findAll{ it['@path'] == aspectsLib.absolutePath }.each {
			def attrs = xmlparser.createNode(it, 'attributes', [:])
			xmlparser.createNode(attrs, 'attribute', [name: 'org.eclipse.ajdt.aspectpath', value: 'true']);
		}
	}
}

eclipse.project.file.withXml { xmlProvider->
	def projectDescription = xmlProvider.asNode()
	def xmlparser = new XmlParser()

	def builders = projectDescription.buildSpec[0]
	def ajbuilder = xmlparser.createNode(builders, 'buildCommand', [:])
	xmlparser.createNode(ajbuilder, 'name', [:]).setValue('org.eclipse.ajdt.core.ajbuilder')
	xmlparser.createNode(ajbuilder, 'arguments', [:]);

	def natures = projectDescription.natures[0]
	def ajnature = xmlparser.createNode(null, 'nature', [:])
	ajnature.setValue('org.eclipse.ajdt.ui.ajnature');
	natures.children().add(0, ajnature)
}

