
Infeasible Code:
in file: McEliecePKCSCipher.java	from 206 to 206
    private byte[] computeMessage(GF2Vector mr)
        throws Exception
    {
        byte[] mrBytes = mr.getEncoded();
        // find first non-zero byte
        int index;
        for (index = mrBytes.length - 1; index >= 0 && mrBytes[index] == 0; index--)
        {
            ;
        }

        // check if padding byte is valid
        if (mrBytes[index] != 0x01)  //doomed if mrBytes[index] == 0 for all index
        {
            throw new Exception("Bad Padding: invalid ciphertext");
        }

        // extract and return message
        byte[] mBytes = new byte[index];
        System.arraycopy(mrBytes, 0, mBytes, 0, index);
        return mBytes;
    }




Infeasible Code:
in file: CertificationRequestInfo.java	from 96 to 96
    public CertificationRequestInfo(
        X509Name                subject,
        SubjectPublicKeyInfo    pkInfo,
        ASN1Set                 attributes)
    {
        this.subject = X500Name.getInstance(subject.toASN1Primitive());
        this.subjectPKInfo = pkInfo;
        this.attributes = attributes;
		//SUBJECT CANNOT BE null DO YOU MEAN this.subject?
        if ((subject == null) || (version == null) || (subjectPKInfo == null))
        {
            throw new IllegalArgumentException("Not all mandatory fields set in CertificationRequestInfo generator.");
        }
    }








Infeasible Code:
in file: ECPoint.java	from 970 to 970
                    if (Z1IsOne)
                    {
                        M = M.add(a4);
                    }
                    else if (!a4.isZero())
                    {
                        ECFieldElement Z1Squared = Z1IsOne ? Z1 : Z1.square(); // useless check





Infeasible Code:
in file: ECPoint.java	from 774 to 774
                if (!Z1IsOne && Z1.equals(Z2))
                {
                    // TODO Make this available as public method coZAdd?

                    ECFieldElement dx = X1.subtract(X2), dy = Y1.subtract(Y2);
                    if (dx.isZero())
                    {
                        if (dy.isZero())
                        {
                            return twice();
                        }
                        return curve.getInfinity();
                    }

                    ECFieldElement C = dx.square();
                    ECFieldElement W1 = X1.multiply(C), W2 = X2.multiply(C);
                    ECFieldElement A1 = W1.subtract(W2).multiply(Y1);

                    X3 = dy.square().subtract(W1).subtract(W2);
                    Y3 = W1.subtract(X3).multiply(dy).subtract(A1);
                    Z3 = dx;

                    if (Z1IsOne)
                    {
                        Z3Squared = C; //Unreachable
                    }



Infeasible Code:
in file: McElieceKobaraImaiCipher.java	from 300 to 300
        // generate random sequence R(r') ...
        // (!A!) mConstPrime.length is always c1Len
        byte[] mConstPrime = new byte[c1Len]; 
        sr0.nextBytes(mConstPrime);

        // ... and XOR with c1 to obtain (m||const')
        for (int i = c1Len - 1; i >= 0; i--)
        {
            mConstPrime[i] ^= c1[i];
        }

        if (mConstPrime.length < c1Len) 
        {
        	// can't be because of (!A!)
            throw new Exception("Bad Padding: invalid ciphertext");
        }



Infeasible Code:
in file: NTRUSigningPrivateKeyParameters.java	from 129 to 129
    @Override
    public int hashCode()
    {
        final int prime = 31;
        int result = 1;
        // base cannot be null otherwise you crash in the following line!
        result = prime * result + ((bases == null) ? 0 : bases.hashCode()); 
        for (Basis basis : bases)
        {
            result += basis.hashCode();
        }
        return result;
    }


Infeasible Code:
in file: TlsRSAUtils.java	from 106 to 137
line 71:         boolean versionNumberCheckDisabled = false;
line 106:        if (versionNumberCheckDisabled && clientVersion.isEqualOrEarlierVersionOf(ProtocolVersion.TLSv10))


Infeasible Code:
in file: DTLSRecordLayer.java	from 340 to 340
        if (this.inHandshake || this.writeEpoch == this.retransmitEpoch)
        {
            contentType = ContentType.handshake;

            short handshakeType = TlsUtils.readUint8(buf, off);
            if (handshakeType == HandshakeType.finished)
            {
                DTLSEpoch nextEpoch = null;
                if (this.inHandshake)
                {
                    nextEpoch = pendingEpoch;
                }
                else if (this.writeEpoch == this.retransmitEpoch)
                {
                    nextEpoch = currentEpoch; //unreachable
                }



Infeasible Code:
in file: GF2nONBElement.java	from 368 to 368
    public boolean isOne()
    {

        boolean result = true;

        for (int i = 0; i < mLength - 1 && result; i++)
        {
            result = result
                && ((mPol[i] & 0xFFFFFFFFFFFFFFFFL) == 0xFFFFFFFFFFFFFFFFL);
        }

        if (result)
        {
        //the == part is trivially true because (mPol[i] & 0xFFFFFFFFFFFFFFFFL) == 0xFFFFFFFFFFFFFFFFL
        //with i == mLength - 1 from the last iteration of the for loop. 
            result = result
                && ((mPol[mLength - 1] & mMaxmask[mBit - 1]) == mMaxmask[mBit - 1]); 
        }

        return result;
    }


Infeasible Code:
in file: LongArray.java	from 1214 to 1214
        width = 4; positions = 16; top = 64; banks = 8;
        int shifts = top < 64 ? positions : positions - 1;


Infeasible Code:
in file: TlsAEADCipher.java	from 54 to 54
        int key_block_size = (2 * cipherKeySize) + (2 * fixed_iv_length);
        int offset = 0;
        offset += cipherKeySize;
        offset += cipherKeySize;
        offset += fixed_iv_length;
        offset += fixed_iv_length;
        if (offset != key_block_size)






Infeasible Code:
in file: SkeinParameters.java	from 203 to 203
        public Builder set(int type, byte[] value)
        {
            if (value == null)
            {
                throw new IllegalArgumentException("Parameter value must not be null.");
            }
            if ((type != PARAM_TYPE_KEY)
                && (type <= PARAM_TYPE_CONFIG || type >= PARAM_TYPE_OUTPUT || type == PARAM_TYPE_MESSAGE))
            {
                throw new IllegalArgumentException("Parameter types must be in the range 0,5..47,49..62.");
            }
            if (type == PARAM_TYPE_CONFIG)


Infeasible Code:
in file: GF2Polynomial.java	from 1799 to 1799
    public void xorBit(int i)
        throws RuntimeException
    {
        if (i < 0 || i > (len - 1))
        {
            throw new RuntimeException();
        }
        if (i > (len - 1))
        {
            return;
        }
        value[i >>> 5] ^= bitMask[i & 0x1f];
    }


Infeasible Code:
in file: NTRUSigningPrivateKeyParameters.java	from 155 to 155
        if (bases == null)
        {
            if (other.bases != null)
            {
                return false;
            } //the else case must fail!
        }
        if (bases.size() != other.bases.size())
        {
            return false;
        }


Infeasible Code:
in file: TlsPSKKeyExchange.java	from 96 to 102
		//condition trivial
        if (this.psk_identity_hint == null)
        {
            TlsUtils.writeOpaque16(TlsUtils.EMPTY_BYTES, buf);
        }     
in file: TlsPSKKeyExchange.java	from 89 to 89
        this.psk_identity_hint = null;
		//first condition trivial
        if (this.psk_identity_hint == null && !requiresServerKeyExchange())
        {






Infeasible Code:
in file: GF2Polynomial.java	from 1742 to 1742
    public void setBit(int i)
        throws RuntimeException
    {
        if (i < 0 || i > (len - 1))
        {
            throw new RuntimeException();
        }
        if (i > (len - 1))
        {
            return; // Unreachable
        }
        value[i >>> 5] |= bitMask[i & 0x1f];
        return;
    }



Infeasible Code:
in file: GF2Polynomial.java	from 1779 to 1779
    public void resetBit(int i)
        throws RuntimeException
    {
        if (i < 0 || i > (len - 1))
        {
            throw new RuntimeException();
        }
        if (i > (len - 1))
        {
            return;
        }
        value[i >>> 5] &= ~bitMask[i & 0x1f];
    }



